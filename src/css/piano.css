/*
Piano Projector
Copyright (C) 2025 Josias Matschulat

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* Import key label font */
@import url('https://fonts.googleapis.com/css2?family=PT+Sans+Narrow:wght@400;700&display=swap');

:root {
    --color-highlight: #f00;
    --color-white-key: #eee;
    --color-black-key: #222;
    --color-background: black;
    --color-key-light-border: #999;
    --color-key-dark-border: #555;
    --color-white-key-light-border: #999;
    --color-white-key-dark-border:  #555;
    --color-black-key-left-bevel:   color(from #999 srgb r g b / 37%);
    --color-black-key-bottom-bevel: color(from #666 srgb r g b / 37%);
    --color-black-key-right-bevel:  color(from #444 srgb r g b / 37%);
    --color-felt-top: #920;
    --color-felt-bottom: color-mix(in hsl, var(--color-felt-top) 30%, #000 45%);
    --highlight-transition-duration: 0.05s;
    --unpress-transition-duration: 0.1s;
    --highlight-opacity: 100%;
    --color-highlight-alpha: color(from var(--color-highlight) srgb r g b / var(--highlight-opacity));
    --stroke-width: 1.3px;
}

svg#piano {
    min-width: 100%;
    max-height: 100%;
    position: absolute;
    transform-origin: top left;
    
    &, * { image-rendering: optimizeSpeed; }

    &:not(.grabbing, touch-input) {
        cursor: grab;
    }

    &.touch-input:not(.grabbing) {
        cursor: pointer;
    }

    &.grabbing {
        cursor: grabbing;
    }

    &.marking-mode:not(.grabbing) {
        cursor: crosshair !important;
    }

    .key {
        transform-origin: center top 0px;

        .invisible {
            fill: none;
            stroke: none;
            visibility: hidden;
        }

        .key-touch-area {
            pointer-events: all;
        }

        :not(.key-touch-area), & {
            pointer-events: none;
        }

        &:not(.active),
        &.active:not(.pressed) {
            .key-highlight {
                opacity: 0%;
                &:not(.lowperf) {
                    transition-property: opacity, d;
                    transition-duration: var(--highlight-transition-duration),
                                         var(--unpress-transition-duration);
                    transition-timing-function: ease-out, ease-in;
                }
            }
        }

        &.active {
            .key-highlight {
                opacity: 100%;
            }
            &.dim .key-highlight {
                opacity: 55%;
            }
            /* .gap-reflection {
                fill-opacity: 5%;
            } */
        }
    }

    .white-key {
        .key-fill {
            &.lowperf { fill: var(--color-white-key); }
            &:not(.lowperf) { fill: url(#white-key-gradient); }
        }
        .key-highlight {
            &.lowperf {
                fill: var(--color-highlight);
                fill-opacity: var(--highlight-opacity);
            }
            &:not(.lowperf) {
                fill: url(#pressed-white-key-highlight-gradient);
            }
        }
        &:not(.pressed):not(.lowperf) path {
            transition: d var(--unpress-transition-duration) ease-in;
        }
        .white-key-border {
            stroke-width: var(--stroke-width);
            stroke-linecap: square;
            fill: none;
            pointer-events: stroke;
        }
        .key-light-border {
            stroke: color-mix(in srgb, var(--color-white-key-light-border) 70%, var(--color-white-key));
        }        
        .key-dark-border {
            stroke: color-mix(in srgb, var(--color-white-key-dark-border) 70%, var(--color-white-key));
        }
    }
    
    .black-key {
        .key-fill {
            &.lowperf { fill: var(--color-black-key); }
            &:not(.lowperf) { fill: url(#black-key-gradient); }
        }
        .key-highlight {
            &.lowperf {
                fill: var(--color-highlight);
                fill-opacity: var(--highlight-opacity);
            }
            &:not(.lowperf) {
                fill: url(#pressed-black-key-highlight-gradient);
            }
        }
        &:not(.pressed):not(.lowperf) path {
            transition: d var(--unpress-transition-duration) ease-in;
        }
        .black-key-bevel {
            pointer-events: fill;
        }
        .key-left-bevel {
            fill: var(--color-black-key-left-bevel);
        }        
        .key-right-bevel {
            fill: var(--color-black-key-right-bevel);
        }        
        .key-bottom-bevel {
            fill: var(--color-black-key-bottom-bevel);
        }
        .key-left-round-bevel {
            fill: color-mix(in srgb, var(--color-black-key-left-bevel), var(--color-black-key-bottom-bevel) 60%);
        }
        .key-right-round-bevel {
            fill: color-mix(in srgb, var(--color-black-key-right-bevel), var(--color-black-key-bottom-bevel) 60%);
        }
        /* .gap-reflection {
            fill: url("#gap-reflection-gradient");
            fill-opacity: 20%;
        } */
    }
    
    /* Key markings (labels and stickers) */

    .key-marker-group:not(.lowperf) {
        transform-origin: center center;
        transform-box: content-box;
    }

    .key:not(.pressed) .key-marker-group:not(.lowperf) {
        transition: transform var(--unpress-transition-duration) ease-in;
    }
    
    /* Key labels */

    .key-label {
        font-family: "PT Sans Narrow", "Arial Narrow", var(--sl-font-sans), sans-serif;
        font-weight: 100;
        text-anchor: middle;
        text-rendering: optimizeSpeed;
        white-space: wrap;
        opacity: 0%;
        pointer-events: none;
    }

    .key:not(.label-visible) .key-label { display: none; }

    .key.label-visible .key-label { opacity: 100%; }

    .key.has-temporary-label:not(.label-visible) .key-label {
        fill: lch(from var(--color-highlight) clamp(0, calc(calc(55 - l) * 10000), 100) 0 h / 90%);
        opacity: 0%;
        &:not(.lowperf) {
            transition-property: opacity;
            transition-timing-function: ease-in;
            transition-duration: var(--highlight-transition-duration);
        }
    }

    .white-key-label {
        font-size: 36px;
        fill: lch(from var(--color-white-key) clamp(0, calc(calc(55 - l) * 10000), 100) 0 h / 80%);
    }

    .black-key-label {
        font-size: 25px;
        fill: lch(from var(--color-black-key) clamp(0, calc(calc(55 - l) * 10000), 100) 0 h / 80%);
        tspan { text-anchor: middle; }
    }

    .key-label.rotated {
        text-anchor: start;
        transform-box: content-box;
    }

    .white-key.active .key-label {
        fill: lch(from color-mix(in srgb, var(--color-highlight) var(--highlight-opacity), var(--color-white-key)) 
                  clamp(0, calc(calc(55 - l) * 10000), 100) 0 h / 90%);
    }

    .black-key.active .key-label {
        fill: lch(from color-mix(in srgb, var(--color-highlight) var(--highlight-opacity), var(--color-black-key)) 
                  clamp(0, calc(calc(55 - l) * 10000), 100) 0 h / 90%);
    }

    .white-key.has-sticker {
        .key-label:not(.rotated) {
            transform: translateY(-20px);
        }
        .key-label.rotated {
            transform-origin: left center;
            transform: translateY(-20px) rotate(-90deg) translateX(-18px) scale(70%);
        }
    }

    .black-key.has-sticker {
        .key-label:not(.rotated) {
            transform: translateY(-25px);
        }
        .key-label.rotated {
            transform-origin: center center;
            transform: translateY(-25px) rotate(-90deg) translateX(10px);
        }
    }

    .key:not(.has-sticker) .key-label.rotated {
        &.white-key-label {
            transform-origin: left center;
            transform: rotate(-90deg) translateX(-18px) scale(70%);
        }
        &.black-key-label {
            transform-origin: center center;
            transform: rotate(-90deg) translateX(10px);
        }
    }

    /* Key sticker */

    .key {
        .key-sticker {
            stroke-width: calc(var(--stroke-width) * 3);
            paint-order: stroke;
            opacity: 85%;
            stroke-opacity: 80%;
        }
    
        &.has-sticker-red    { .key-sticker { fill: red;    stroke: #700; } }
        &.has-sticker-yellow { .key-sticker { fill: yellow; stroke: #770; } }
        &.has-sticker-green  { .key-sticker { fill: #0b0;   stroke: #050; } }
        &.has-sticker-blue   { .key-sticker { fill: blue;   stroke: #007; } }
        &.has-sticker-violet { .key-sticker { fill: violet; stroke: #707; } }
            
        &:not(.has-sticker) .key-sticker {
            display: none;
        }
    }

    /* Top red felt */

    #top-felt {
        &[hidden] { display: none; }
        &.lowperf { fill: var(--color-felt-top); }
        &:not(lowperf) { fill: url("#top-felt-gradient"); }
    }

}
